// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/meysamhadeli/shop-golang-microservices/internal/services/media_service/media/models"

	utils "github.com/meysamhadeli/shop-golang-microservices/internal/pkg/utils"

	uuid "github.com/satori/go.uuid"
)

// MediaRepository is an autogenerated mock type for the MediaRepository type
type MediaRepository struct {
	mock.Mock
}

// CreateMedia provides a mock function with given fields: ctx, media
func (_m *MediaRepository) CreateMedia(ctx context.Context, mediamodels.Media) (*models.Media, error) {
	ret := _m.Called(ctx, media

	var r0 *models.Media
	if rf, ok := ret.Get(0).(func(context.Context, *models.Media) *models.Media); ok {
		r0 = rf(ctx, media
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Media) error); ok {
		r1 = rf(ctx, media
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaByID provides a mock function with given fields: ctx, _a1
func (_m *MediaRepository) DeleteMediaByID(ctx context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMedias provides a mock function with given fields: ctx, listQuery
func (_m *MediaRepository) GetAllMedias(ctx context.Context, listQuery *utils.ListQuery) (*utils.ListResult[*models.Media], error) {
	ret := _m.Called(ctx, listQuery)

	var r0 *utils.ListResult[*models.Media]
	if rf, ok := ret.Get(0).(func(context.Context, *utils.ListQuery) *utils.ListResult[*models.Media]); ok {
		r0 = rf(ctx, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*models.Media])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *utils.ListQuery) error); ok {
		r1 = rf(ctx, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaById provides a mock function with given fields: ctx, _a1
func (_m *MediaRepository) GetMediaById(ctx context.Context, _a1 uuid.UUID) (*models.Media, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.Media
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Media); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMedias provides a mock function with given fields: ctx, searchText, listQuery
func (_m *MediaRepository) SearchMedias(ctx context.Context, searchText string, listQuery *utils.ListQuery) (*utils.ListResult[*models.Media], error) {
	ret := _m.Called(ctx, searchText, listQuery)

	var r0 *utils.ListResult[*models.Media]
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.ListQuery) *utils.ListResult[*models.Media]); ok {
		r0 = rf(ctx, searchText, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*models.Media])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.ListQuery) error); ok {
		r1 = rf(ctx, searchText, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMedia provides a mock function with given fields: ctx, media
func (_m *MediaRepository) UpdateMedia(ctx context.Context, mediamodels.Media) (*models.Media, error) {
	ret := _m.Called(ctx, media

	var r0 *models.Media
	if rf, ok := ret.Get(0).(func(context.Context, *models.Media) *models.Media); ok {
		r0 = rf(ctx, media
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Media) error); ok {
		r1 = rf(ctx, media
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMediaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMediaRepository creates a new instance of MediaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMediaRepository(t mockConstructorTestingTNewMediaRepository) *MediaRepository {
	mock := &MediaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
